{"version":3,"sources":["Components/card/Card.jsx","Components/card-list/CardList.jsx","Components/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","element","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,MAChE,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCJlBC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAU,YAAf,SACKD,EAAMW,SAASC,KAAI,SAAAC,GAAO,OACvB,cAAC,EAAD,CAAuBT,QAASS,GAArBA,EAAQR,UCNtBS,G,YAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOf,UAAU,SAASgB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwCrEG,E,kDAvCb,aAAc,IAAD,8BACb,gBAEKC,MAAQ,CACTT,SAAW,GACXU,YAAa,IALJ,E,qDASf,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OACZA,EAASC,UAEVF,MAAK,SAAAG,GACJjB,QAAQC,IAAIgB,GACZ,EAAKC,SAAS,CAAChB,SAAUe,S,oBAI7B,WAAS,IAAD,OACN,EAAgCE,KAAKR,MAA9BT,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXQ,EAAmBlB,EAASmB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASX,EAAYU,kBAClD,OACE,sBAAK9B,UAAY,MAAjB,UACE,gDACA,cAAC,EAAD,CACEc,YAAY,qBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUxB,SAAYkB,W,GAhCVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c1352524.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt='monster' src = {`https://robohash.org/${props.monster.id}`}/>\r\n            <h1>{props.monster.name}</h1>\r\n            <h2>{props.monster.email}</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './CardList.css'\r\nimport {Card} from '../card/Card'\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map(element => (\r\n                <Card key={element.id} monster={element}/>\r\n            ))}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './SearchBox.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input className=\"search\" type='search' placeholder={placeholder} onChange={handleChange} />\r\n    )\r\n}\r\n","import React, {Component } from 'react';\nimport { CardList } from './Components/card-list/CardList';\nimport './App.css';\nimport { SearchBox } from './Components/search-box/SearchBox';\n\nclass App extends Component{\n  constructor(){\n  super();\n\n  this.state = {\n      monsters : [],\n      searchField: ''\n  };\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response =>\n    response.json()\n  ) \n  .then(users => {\n    console.log(users)\n    this.setState({monsters: users})\n  });\n}\n\nrender(){\n  const {monsters, searchField} = this.state;\n  const filteredMonsters = monsters.filter(monster => \n    monster.name.toLowerCase().includes(searchField.toLowerCase()))\n  return (\n    <div className = 'App'>\n      <h1>Monsters World</h1>\n      <SearchBox \n        placeholder='search monsters...'\n        handleChange={e => this.setState({ searchField: e.target.value })}\n      />      \n      <CardList monsters = {filteredMonsters}>  \n      </CardList>\n      \n    </div>\n  )\n}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}